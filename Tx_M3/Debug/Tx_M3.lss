
Tx_M3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000021  00800100  00800100  00000318  2**0
                  ALLOC
  2 .stab         000007bc  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000183  00000000  00000000  00000ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a8  00000000  00000000  00000c57  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000107  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000599  00000000  00000000  00000e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ab  00000000  00000000  0000139f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000061e  00000000  00000000  0000164a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00001c68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000027a  00000000  00000000  00001d58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000149  00000000  00000000  00001fd2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000009d  00000000  00000000  0000211b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000078  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__vector_18>
  4c:	0c 94 10 01 	jmp	0x220	; 0x220 <__vector_19>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_21>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 32       	cpi	r26, 0x21	; 33
  80:	b1 07       	cpc	r27, r17
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:
#include "utils/UART.h"


uint8_t vel, dir;
int main(void)
{
  90:	ef 92       	push	r14
  92:	ff 92       	push	r15
  94:	0f 93       	push	r16
  96:	1f 93       	push	r17
	/* Inicializa componentes */
    ADC_Init();
  98:	0e 94 8f 00 	call	0x11e	; 0x11e <ADC_Init>
	USART_Init(MYUBRR);
  9c:	8c e0       	ldi	r24, 0x0C	; 12
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <USART_Init>
	
	/* Habilita interrupciones globales */
	sei();
  a4:	78 94       	sei
			dir = 0x0A;					// Establece dirección
			vel = (vel-128)<<1;		// Escala el valor de 0 a 255
		}
		else if (vel <127) // Atras
		{
			dir = 0x0B;					// Establece dirección
  a6:	0f 2e       	mov	r0, r31
  a8:	fb e0       	ldi	r31, 0x0B	; 11
  aa:	ff 2e       	mov	r15, r31
  ac:	f0 2d       	mov	r31, r0
			vel = 126-vel;
  ae:	0e e7       	ldi	r16, 0x7E	; 126
		
		/* Parametros para velocidad y dirección */
		vel = ADC_GetValue();
		if (vel>=128)		// Adelante
		{
			dir = 0x0A;					// Establece dirección
  b0:	0f 2e       	mov	r0, r31
  b2:	fa e0       	ldi	r31, 0x0A	; 10
  b4:	ef 2e       	mov	r14, r31
  b6:	f0 2d       	mov	r31, r0
			vel = 126-vel;
			vel = vel<<1;				// Escala el valor de 0 a 255
		}
		
		if (vel<=5){vel = 0;}
		if (vel>=250){vel = 255;}
  b8:	1f ef       	ldi	r17, 0xFF	; 255
	sei();
	
    while (1) 
    {
		/* Empieza Conversión ADC (8 bits) */
		ADC_Start();
  ba:	0e 94 9d 00 	call	0x13a	; 0x13a <ADC_Start>
		
		/* Parametros para velocidad y dirección */
		vel = ADC_GetValue();
  be:	0e 94 c7 00 	call	0x18e	; 0x18e <ADC_GetValue>
  c2:	80 93 1f 01 	sts	0x011F, r24
		if (vel>=128)		// Adelante
  c6:	88 23       	and	r24, r24
  c8:	34 f4       	brge	.+12     	; 0xd6 <main+0x46>
		{
			dir = 0x0A;					// Establece dirección
  ca:	e0 92 20 01 	sts	0x0120, r14
			vel = (vel-128)<<1;		// Escala el valor de 0 a 255
  ce:	88 0f       	add	r24, r24
  d0:	80 93 1f 01 	sts	0x011F, r24
  d4:	0a c0       	rjmp	.+20     	; 0xea <main+0x5a>
		}
		else if (vel <127) // Atras
  d6:	8f 37       	cpi	r24, 0x7F	; 127
  d8:	40 f4       	brcc	.+16     	; 0xea <main+0x5a>
		{
			dir = 0x0B;					// Establece dirección
  da:	f0 92 20 01 	sts	0x0120, r15
			vel = 126-vel;
  de:	90 2f       	mov	r25, r16
  e0:	98 1b       	sub	r25, r24
  e2:	89 2f       	mov	r24, r25
			vel = vel<<1;				// Escala el valor de 0 a 255
  e4:	88 0f       	add	r24, r24
  e6:	80 93 1f 01 	sts	0x011F, r24
		}
		
		if (vel<=5){vel = 0;}
  ea:	80 91 1f 01 	lds	r24, 0x011F
  ee:	86 30       	cpi	r24, 0x06	; 6
  f0:	18 f4       	brcc	.+6      	; 0xf8 <main+0x68>
  f2:	10 92 1f 01 	sts	0x011F, r1
  f6:	04 c0       	rjmp	.+8      	; 0x100 <main+0x70>
		if (vel>=250){vel = 255;}
  f8:	8a 3f       	cpi	r24, 0xFA	; 250
  fa:	10 f0       	brcs	.+4      	; 0x100 <main+0x70>
  fc:	10 93 1f 01 	sts	0x011F, r17
		
		USART_Transmit(dir);
 100:	80 91 20 01 	lds	r24, 0x0120
 104:	0e 94 3b 01 	call	0x276	; 0x276 <USART_Transmit>
		USART_Transmit(vel);	
 108:	80 91 1f 01 	lds	r24, 0x011F
 10c:	0e 94 3b 01 	call	0x276	; 0x276 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 110:	87 ea       	ldi	r24, 0xA7	; 167
 112:	91 e6       	ldi	r25, 0x61	; 97
 114:	01 97       	sbiw	r24, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <main+0x84>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0x8a>
 11a:	00 00       	nop
 11c:	ce cf       	rjmp	.-100    	; 0xba <main+0x2a>

0000011e <ADC_Init>:
Returns:  none
*************************************************************************/
void ADC_Init(void)
{
	/* Voltage Reference = AVCC */
	ADMUX |= (1<<REFS0)|(ADC_CHANNEL<<MUX0);
 11e:	ec e7       	ldi	r30, 0x7C	; 124
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	81 64       	ori	r24, 0x41	; 65
 126:	80 83       	st	Z, r24
	#if ADC_MODE == EIGHTBIT
	ADMUX |= (1<<ADLAR); 	// Adjust the bits to the left
 128:	80 81       	ld	r24, Z
 12a:	80 62       	ori	r24, 0x20	; 32
 12c:	80 83       	st	Z, r24
	#endif

	/* ADC Enable, ADC Interrupt Enable, Prescaler predefined to work at 125 KHz */
	ADCSRA |= (1<<ADEN)|(1<<ADIE)|(ADC_PRESC<<ADPS0);
 12e:	ea e7       	ldi	r30, 0x7A	; 122
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8e 68       	ori	r24, 0x8E	; 142
 136:	80 83       	st	Z, r24
}
 138:	08 95       	ret

0000013a <ADC_Start>:

void ADC_Start()
{
	/* Activa ADC */
	ADCSRA |= (1<<ADSC);
 13a:	ea e7       	ldi	r30, 0x7A	; 122
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
	/* Cambia de estadp*/
	ADC_status = ADC_WAIT;
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	80 93 0a 01 	sts	0x010A, r24
}
 14a:	08 95       	ret

0000014c <__vector_21>:
Interrupt Vector for the ADC.
If the conversion is ready this ISR will execute. Saves the data and
change the index of the ADC Buffer.
*************************************************************************/
ISR(ADC_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	8f 93       	push	r24
 158:	9f 93       	push	r25
 15a:	ef 93       	push	r30
 15c:	ff 93       	push	r31
	#if ADC_MODE == TENBIT
	uint16_t temp;
	temp = ADC;
	#elif ADC_MODE == EIGHTBIT
	uint8_t temp;
	temp = ADCH;
 15e:	90 91 79 00 	lds	r25, 0x0079
	#endif
	
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (ADC_Head + 1) & ADC_BUFFER_MASK;
 162:	80 91 00 01 	lds	r24, 0x0100
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	87 70       	andi	r24, 0x07	; 7
	
	/* Store new index */
	ADC_Head = tmphead;
 16a:	80 93 00 01 	sts	0x0100, r24
	
	/* Store the data in the buffer */
	ADC_Buffer[tmphead] = temp;
 16e:	e2 e0       	ldi	r30, 0x02	; 2
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	e8 0f       	add	r30, r24
 174:	f1 1d       	adc	r31, r1
 176:	90 83       	st	Z, r25

	/* Change the current state */
	ADC_status = ADC_RDY;
 178:	10 92 0a 01 	sts	0x010A, r1
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	0f 90       	pop	r0
 186:	0f be       	out	0x3f, r0	; 63
 188:	0f 90       	pop	r0
 18a:	1f 90       	pop	r1
 18c:	18 95       	reti

0000018e <ADC_GetValue>:

#elif ADC_MODE == EIGHTBIT
uint8_t ADC_GetValue(void)
{
	/*Espera a nueva data*/
	while(ADC_Head == ADC_Tail){}
 18e:	90 91 00 01 	lds	r25, 0x0100
 192:	80 91 01 01 	lds	r24, 0x0101
 196:	98 17       	cp	r25, r24
 198:	d1 f3       	breq	.-12     	; 0x18e <ADC_GetValue>
	uint8_t tmptail;
	
	/* Calcula el indice */
	tmptail = (ADC_Tail + 1) & ADC_BUFFER_MASK;
 19a:	80 91 01 01 	lds	r24, 0x0101
 19e:	8f 5f       	subi	r24, 0xFF	; 255
 1a0:	87 70       	andi	r24, 0x07	; 7
	/* Almacena nuevo indice */
	ADC_Tail = tmptail;
 1a2:	80 93 01 01 	sts	0x0101, r24
	/* Devuelve el valor */
	return ADC_Buffer[ADC_Tail];
 1a6:	80 91 01 01 	lds	r24, 0x0101
 1aa:	e2 e0       	ldi	r30, 0x02	; 2
 1ac:	f1 e0       	ldi	r31, 0x01	; 1
 1ae:	e8 0f       	add	r30, r24
 1b0:	f1 1d       	adc	r31, r1
}
 1b2:	80 81       	ld	r24, Z
 1b4:	08 95       	ret

000001b6 <USART_Init>:
Returns:  none
*************************************************************************/
void USART_Init(unsigned int ubrr_val)
{
	/* Set the baud rate */
	UBRR0H = (uint8_t) (ubrr_val>>8);                  
 1b6:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (uint8_t) ubrr_val;
 1ba:	80 93 c4 00 	sts	0x00C4, r24
	
	/* Enable 2X Mode */ 
	UCSR0A = (1<<U2X0);
 1be:	82 e0       	ldi	r24, 0x02	; 2
 1c0:	80 93 c0 00 	sts	0x00C0, r24
	
	/* Enable USART receiver and transmitter */
	UCSR0B = ((1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0)); 
 1c4:	88 e9       	ldi	r24, 0x98	; 152
 1c6:	80 93 c1 00 	sts	0x00C1, r24

	/* Set frame format: 8 data 1stop */
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
 1ca:	86 e0       	ldi	r24, 0x06	; 6
 1cc:	80 93 c2 00 	sts	0x00C2, r24
	
	/* Flush buffers */    
	USART_RxTail = 0;
 1d0:	10 92 16 01 	sts	0x0116, r1
	USART_RxHead = 0;
 1d4:	10 92 15 01 	sts	0x0115, r1
	USART_TxTail = 0;
 1d8:	10 92 0c 01 	sts	0x010C, r1
	USART_TxHead = 0;
 1dc:	10 92 0b 01 	sts	0x010B, r1
}
 1e0:	08 95       	ret

000001e2 <__vector_18>:
Interrupt Vector for the RX Mode.
If there are new unread data this ISR will execute. Saves the data and
change the index of the RX Buffer.
*************************************************************************/
ISR(USART_RX_vect)
{
 1e2:	1f 92       	push	r1
 1e4:	0f 92       	push	r0
 1e6:	0f b6       	in	r0, 0x3f	; 63
 1e8:	0f 92       	push	r0
 1ea:	11 24       	eor	r1, r1
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
	uint8_t data;
	uint8_t tmphead;

	/* Read the received data */
	data = UDR0;                 
 1f4:	90 91 c6 00 	lds	r25, 0x00C6
	/* Calculate buffer index */
	tmphead = (USART_RxHead + 1) & USART_RX_BUFFER_MASK;
 1f8:	80 91 15 01 	lds	r24, 0x0115
 1fc:	8f 5f       	subi	r24, 0xFF	; 255
 1fe:	87 70       	andi	r24, 0x07	; 7
	/* Store new index */
	USART_RxHead = tmphead;
 200:	80 93 15 01 	sts	0x0115, r24
	/* Store received data in buffer */
	USART_RxBuf[tmphead] = data; 
 204:	e7 e1       	ldi	r30, 0x17	; 23
 206:	f1 e0       	ldi	r31, 0x01	; 1
 208:	e8 0f       	add	r30, r24
 20a:	f1 1d       	adc	r31, r1
 20c:	90 83       	st	Z, r25
}
 20e:	ff 91       	pop	r31
 210:	ef 91       	pop	r30
 212:	9f 91       	pop	r25
 214:	8f 91       	pop	r24
 216:	0f 90       	pop	r0
 218:	0f be       	out	0x3f, r0	; 63
 21a:	0f 90       	pop	r0
 21c:	1f 90       	pop	r1
 21e:	18 95       	reti

00000220 <__vector_19>:
If the buffer of the UART is empty this ISR will execute. Check for new 
data to be sent and puts that into the buffer . Change the index of the 
TX Buffer.
*************************************************************************/
ISR(USART_UDRE_vect)
{
 220:	1f 92       	push	r1
 222:	0f 92       	push	r0
 224:	0f b6       	in	r0, 0x3f	; 63
 226:	0f 92       	push	r0
 228:	11 24       	eor	r1, r1
 22a:	8f 93       	push	r24
 22c:	9f 93       	push	r25
 22e:	ef 93       	push	r30
 230:	ff 93       	push	r31
	uint8_t tmptail;

	/* Check if all data is transmitted */
	if (USART_TxHead != USART_TxTail) 
 232:	90 91 0b 01 	lds	r25, 0x010B
 236:	80 91 0c 01 	lds	r24, 0x010C
 23a:	98 17       	cp	r25, r24
 23c:	71 f0       	breq	.+28     	; 0x25a <__vector_19+0x3a>
	{
		/* Calculate buffer index */
		tmptail = (USART_TxTail + 1) & USART_TX_BUFFER_MASK;
 23e:	80 91 0c 01 	lds	r24, 0x010C
 242:	8f 5f       	subi	r24, 0xFF	; 255
 244:	87 70       	andi	r24, 0x07	; 7
		/* Store new index */
		USART_TxTail = tmptail;      
 246:	80 93 0c 01 	sts	0x010C, r24
		/* Start transmission */
		UDR0 = USART_TxBuf[tmptail];  
 24a:	ed e0       	ldi	r30, 0x0D	; 13
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	e8 0f       	add	r30, r24
 250:	f1 1d       	adc	r31, r1
 252:	80 81       	ld	r24, Z
 254:	80 93 c6 00 	sts	0x00C6, r24
 258:	05 c0       	rjmp	.+10     	; 0x264 <__vector_19+0x44>
	} else 
	{       
		/* Disable UDRE interrupt */
		UCSR0B &= ~(1<<UDRIE0);         
 25a:	e1 ec       	ldi	r30, 0xC1	; 193
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	80 81       	ld	r24, Z
 260:	8f 7d       	andi	r24, 0xDF	; 223
 262:	80 83       	st	Z, r24
	}
}
 264:	ff 91       	pop	r31
 266:	ef 91       	pop	r30
 268:	9f 91       	pop	r25
 26a:	8f 91       	pop	r24
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <USART_Transmit>:
void USART_Transmit(uint8_t data)
{
	uint8_t tmphead;
	
	/* Calculate buffer index */
	tmphead = (USART_TxHead + 1) & USART_TX_BUFFER_MASK;
 276:	20 91 0b 01 	lds	r18, 0x010B
 27a:	2f 5f       	subi	r18, 0xFF	; 255
 27c:	27 70       	andi	r18, 0x07	; 7
	/* Wait for free space in buffer */
	while (tmphead == USART_TxTail);
 27e:	90 91 0c 01 	lds	r25, 0x010C
 282:	29 17       	cp	r18, r25
 284:	e1 f3       	breq	.-8      	; 0x27e <USART_Transmit+0x8>
	/* Store data in buffer */
	USART_TxBuf[tmphead] = data;
 286:	ed e0       	ldi	r30, 0x0D	; 13
 288:	f1 e0       	ldi	r31, 0x01	; 1
 28a:	e2 0f       	add	r30, r18
 28c:	f1 1d       	adc	r31, r1
 28e:	80 83       	st	Z, r24
	/* Store new index */
	USART_TxHead = tmphead;               
 290:	20 93 0b 01 	sts	0x010B, r18
	/* Enable UDRE interrupt */
	UCSR0B |= (1<<UDRIE0);                    
 294:	e1 ec       	ldi	r30, 0xC1	; 193
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 62       	ori	r24, 0x20	; 32
 29c:	80 83       	st	Z, r24
}
 29e:	08 95       	ret

000002a0 <_exit>:
 2a0:	f8 94       	cli

000002a2 <__stop_program>:
 2a2:	ff cf       	rjmp	.-2      	; 0x2a2 <__stop_program>
